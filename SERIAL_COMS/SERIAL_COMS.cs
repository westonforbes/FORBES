using System;
using System.Timers;
using System.Data;
using System.Management;
using System.Collections.Generic;
using System.Linq;
using System.IO.Ports;
using FORBES.LOGGER_NAMESPACE;

namespace FORBES.SERIAL_COMS_NAMESPACE
{
    /// <summary>
    /// Struture that holds properties for the serial connection.
    /// </summary>
    public struct PORT_SETTINGS
    {
        /// <summary>
        /// Port Name, e.g. "COM11".
        /// </summary>
        public string PORT_NAME;
        /// <summary>
        /// Baud Rate.
        /// </summary>
        public int BAUD_RATE;
        /// <summary>
        /// Parity.
        /// </summary>
        public Parity PARITY;
        /// <summary>
        /// Data bits, 5 through 8 acceptable.
        /// </summary>
        public int DATA_BITS;
        /// <summary>
        /// Stop bits.
        /// </summary>
        public StopBits STOP_BITS;
        /// <summary>
        /// RTS Enable.
        /// </summary>
        public bool RTS_ENABLE;
        /// <summary>
        /// Read timeout in mS.
        /// </summary>
        public int READ_TIMEOUT;
        /// <summary>
        /// Write timeout in mS.
        /// </summary>
        public int WRITE_TIMEOUT;
    }
    /// <summary>
    /// This class handles serial communications.
    /// </summary>
    public class SERIAL_COM
    {
        /// <summary>
        /// Property to set the polling interval for the port.
        /// </summary>
        public int POLL_TIMER_INTERVAL { get; set; } = 100;

        /// <summary>
        /// Holds the current connection status.
        /// </summary>
        public bool CONNECTED { get; private set; } = false;

        private SerialPort SERIAL_PORT = new SerialPort();
        /// <summary>
        /// Log for the class.
        /// </summary>
        public LOGGER EVENTS = new LOGGER("Serial COM Log");
        /// <summary>
        /// Event that is raised when the serial connection disconnects.
        /// </summary>
        public event EventHandler DISCONNECTED;
        /// <summary>
        /// Whenever COM ports are added or removed, this event will be raised.
        /// </summary>
        public event EventHandler PORTS_LIST_CHANGED;
        /// <summary>
        /// When a serial message comes in, this event is raised.
        /// </summary>
        public event EventHandler MESSAGE_RECIEVED;
        private List<string> RETAINED_PORT_LIST = new List<string> { };
        Timer CONNECTED_PORT_POLL_TIMER = new Timer();
        Timer PORTS_LIST_POLL_TIMER = new Timer();
        /// <summary>
        /// The serial buffer queue.
        /// </summary>
        public Queue<string> BUFFER = new Queue<string>();

        /// <summary>
        /// Constructor for class.
        /// </summary>
        public SERIAL_COM()
        {
            EVENTS.LOG_MESSAGE(1, "INITIALIZE");
            CONNECTED_PORT_POLL_TIMER.Interval = POLL_TIMER_INTERVAL; //Set the timer interval for polling the connection.
            PORTS_LIST_POLL_TIMER.Interval = 1000;
            PORTS_LIST_POLL_TIMER.Start();
            //Setup event handlers.
            CONNECTED_PORT_POLL_TIMER.Elapsed += new ElapsedEventHandler(POLL_PORT);
            PORTS_LIST_POLL_TIMER.Elapsed += new ElapsedEventHandler(POLL_FOR_PORTS_LIST_CHANGES);
            SERIAL_PORT.DataReceived += new SerialDataReceivedEventHandler(DATA_RECIEVED);
            SERIAL_PORT.ErrorReceived += new SerialErrorReceivedEventHandler(ERROR_RECIEVED);
            SERIAL_PORT.Disposed += new EventHandler(DISPOSED);
        }

        /// <summary>
        /// This is a simpler version of GET_COM_PORTS. It generates a simple list of connections rather than the more detailed data generated by GET_COM_PORTS.
        /// </summary>
        /// <param name="COM_NAMES"></param>
        /// <param name="SUPRESS"></param>
        /// <returns>
        /// <para>0 = Success.</para>
        /// <para>1 = No ports detected.</para>
        /// <para>2 = Exception generated.</para>
        /// </returns>
        public int GET_COM_PORTS_SIMPLE(out List<string> COM_NAMES, bool SUPRESS = true)
        {
            if (!SUPRESS) EVENTS.LOG_MESSAGE(1, "ENTER");
            try
            {
                string[] STRING_ARRAY = SerialPort.GetPortNames(); //Get the string array of available ports.
                COM_NAMES = new List<string>(STRING_ARRAY); //Convert the string array to a list of strings.
                if (COM_NAMES.Count == 0) //If there are no ports detected...
                {
                    if (!SUPRESS) EVENTS.LOG_MESSAGE(2, "No ports detected.");
                    if (!SUPRESS) EVENTS.LOG_MESSAGE(1, "EXIT_FAIL");
                    return 1; //return non-zero condition.
                }
                else
                {
                    if (!SUPRESS) EVENTS.LOG_MESSAGE(1, "EXIT_SUCCESS");
                }

                return 0; //return successful execution.
            }
            catch (Exception EX)
            {
                if (!SUPRESS) EVENTS.LOG_MESSAGE(2, "EXCEPTION", EX.Message);
                if (!SUPRESS) EVENTS.LOG_MESSAGE(1, "EXIT_FAIL");
                COM_NAMES = new List<string> { }; //Return an empty list.
                return 2;
            }
        }

        /// <summary>
        /// This method does not really do much. It just provides a list of common baud rates. Its really just for programmer convenience.
        /// </summary>
        /// <param name="BAUD_LISTING"></param>
        public void GET_BAUD_RATES(out List<string> BAUD_LISTING)
        {
            //
            EVENTS.LOG_MESSAGE(1, "ENTER");
            string BAUD_STRING = "110,300,600,1200,2400,4800,9600,14400,19200,38400,57600,115200,128000,256000";
            string[] BAUD_ARRAY = BAUD_STRING.Split(','); //Split the string up by the commas.
            BAUD_LISTING = new List<string>(BAUD_ARRAY); //Convert the string array into a list.
            EVENTS.LOG_MESSAGE(1, "EXIT_SUCCESS");
        }

        /// <summary>
        /// This method checks if any ports have been added or removed since the last scan. If so, the event PORTS_LIST_CHANGED is raised.
        /// </summary>
        /// <param name="SENDER"></param>
        /// <param name="E"></param>
        private void POLL_FOR_PORTS_LIST_CHANGES(object SENDER, ElapsedEventArgs E)
        {
            List<string> NEW_LIST = new List<string> { };
            GET_COM_PORTS_SIMPLE(out NEW_LIST);
            if (!Enumerable.SequenceEqual(RETAINED_PORT_LIST, NEW_LIST))
            {
                RETAINED_PORT_LIST = NEW_LIST;
                EVENTS.LOG_MESSAGE(2, "Port change detected.");
                PORTS_LIST_CHANGED?.Invoke(null, null);
            }
        }

        /// <summary>
        /// Handler for when the SerialPort object is disposed of.
        /// </summary>
        /// <param name="SENDER"></param>
        /// <param name="E"></param>
        private void DISPOSED(object SENDER, EventArgs E)
        {
            EVENTS.LOG_MESSAGE(1, "ENTER");
            EVENTS.LOG_MESSAGE(2, "Serial port disposed.");
            EVENTS.LOG_MESSAGE(1, "EXIT_SUCCESS");
        }

        /// <summary>
        /// Handler for when the SerialPort object recieves data.
        /// </summary>
        /// <param name="SENDER"></param>
        /// <param name="E"></param>
        private void DATA_RECIEVED(object SENDER, EventArgs E)
        {
            while (SERIAL_PORT.BytesToRead > 0)
            {
                string MESSAGE = SERIAL_PORT.ReadLine();
                Console.WriteLine(MESSAGE);
                BUFFER.Enqueue(MESSAGE);
                MESSAGE_RECIEVED?.Invoke(null,null);
            }
        }

        /// <summary>
        /// Handler for if the SerialPort connection throws an error.
        /// </summary>
        /// <param name="SENDER"></param>
        /// <param name="E"></param>
        private void ERROR_RECIEVED(object SENDER, EventArgs E)
        {
            EVENTS.LOG_MESSAGE(1, "ENTER");
            EVENTS.LOG_MESSAGE(2, "Error in the serial port.");
            EVENTS.LOG_MESSAGE(1, "EXIT_SUCCESS");
        }

        /// <summary>
        /// This method opens the serial port and starts a port poll timer to make sure it stays alive.
        /// </summary>
        /// <param name="SETTINGS">Serial port settings, see PORT_SETTINGS structure documentation for details.</param>
        /// <returns>
        /// <para>0 = Success.</para>
        /// <para>1 = Exception generated.</para>
        /// <para>2 = Serial port is already open.</para>
        /// <para>3 = Port did not open as expected.</para>
        /// <para>4 = Data bits not in range.</para>
        /// </returns>
        public int OPEN_SERIAL_PORT(PORT_SETTINGS SETTINGS)
        {
            EVENTS.LOG_MESSAGE(1, "ENTER");
            try
            {
                if (!SERIAL_PORT.IsOpen) //If the serial port is not open...
                {
                    if (SETTINGS.DATA_BITS < 5 || SETTINGS.DATA_BITS > 8) //Check if the DATA_BIT setting is of approriate length...
                    {
                        EVENTS.LOG_MESSAGE(2, "Data bits setting must be 5 through 8.");
                        EVENTS.LOG_MESSAGE(1, "EXIT_FAIL");
                        return 4;
                    }
                    //Set all the serial port settings.
                    SERIAL_PORT.PortName = SETTINGS.PORT_NAME;
                    SERIAL_PORT.BaudRate = SETTINGS.BAUD_RATE;
                    SERIAL_PORT.DataBits = SETTINGS.DATA_BITS;
                    SERIAL_PORT.Parity = SETTINGS.PARITY;
                    SERIAL_PORT.StopBits = SETTINGS.STOP_BITS;
                    SERIAL_PORT.RtsEnable = SETTINGS.RTS_ENABLE;
                    SERIAL_PORT.ReadTimeout = SETTINGS.READ_TIMEOUT;
                    SERIAL_PORT.WriteTimeout = SETTINGS.WRITE_TIMEOUT;
                    EVENTS.LOG_MESSAGE(2, "Port settings set.");
                    SERIAL_PORT.Open(); //Open the serial port.
                    if (!SERIAL_PORT.IsOpen) //If the serial port did not open properly...
                    {
                        EVENTS.LOG_MESSAGE(2, "Serial port did not open as expected.");
                        EVENTS.LOG_MESSAGE(1, "EXIT_FAIL");
                        return 3;
                    }
                    CONNECTED = true;
                    EVENTS.LOG_MESSAGE(2, "Serial port open.");
                    CONNECTED_PORT_POLL_TIMER.Start(); //Start the timer that will poll the serial port.
                    EVENTS.LOG_MESSAGE(2, "Port poll timer started.");
                }
                else
                {
                    EVENTS.LOG_MESSAGE(2, "Serial port is already open.");
                    EVENTS.LOG_MESSAGE(1, "EXIT_FAIL");
                    return 2;
                }
            }
            catch (Exception EX)
            {
                EVENTS.LOG_MESSAGE(2, "EXCEPTION", EX.Message);
                EVENTS.LOG_MESSAGE(1, "EXIT_FAIL");
                return 1;

            }
            EVENTS.LOG_MESSAGE(2, "Serial port opened.");
            EVENTS.LOG_MESSAGE(1, "EXIT_SUCCESS");
            return 0;
        }

        /// <summary>
        /// Creates a DataTable structured to hold a list of available COM ports.
        /// </summary>
        /// <returns>
        /// <para>Column "Name": string name of the port, e.g. "COM11".</para>
        /// <para>Column "Description": string description of the port, e.g. "Arduino Uno".</para>
        /// <para>Column "ID": int code for the port, e.g. "11".</para>
        /// <para>Column "Caption": string caption for the port, e.g. "Arduino Uno (COM11)".</para>
        /// </returns>
        private DataTable PORTS_LIST()
        {
            EVENTS.LOG_MESSAGE(1, "ENTER");
            DataTable PORTS = new DataTable();
            PORTS.Columns.Add("Name", typeof(string));
            PORTS.Columns.Add("Description", typeof(string));
            PORTS.Columns.Add("ID", typeof(int));
            PORTS.Columns.Add("Caption", typeof(string));
            EVENTS.LOG_MESSAGE(2, "DataTable for ports list formatted.");
            EVENTS.LOG_MESSAGE(1, "EXIT_SUCCESS");
            return PORTS;
        }

        /// <summary>
        /// This method populates the "out DataTable" argument PORTS with a list of available COM ports. See documentation of PORTS_LIST() method for DataTable structure.
        /// </summary>
        /// <param name="PORTS">A DataTable populated with available port data. See documentation of PORTS_LIST() method for DataTable structure.</param>
        /// <returns>
        /// <para>True = Success.</para>
        /// <para>False = Failure.</para>
        /// </returns>
        public bool GET_COM_PORTS(ref DataTable PORTS)
        {
            EVENTS.LOG_MESSAGE(1, "ENTER");
            PORTS = PORTS_LIST(); //Create a new DataTable in the proper ports list format.
            try
            {
                ManagementObjectSearcher SEARCHER = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_PnPEntity");
                foreach (ManagementObject QUERY_OBJECT in SEARCHER.Get())
                {
                    if (QUERY_OBJECT["Caption"] == null) //If there is a null entry, break out.
                        break;
                    string CAPTION_STRING = ""; //Intialize/erase CAPTION_STRING.
                    CAPTION_STRING = QUERY_OBJECT["Caption"].ToString(); //This string will contain something like Arduino (COM10)
                    if (CAPTION_STRING.Contains("(COM")) //Check if its a regular COM port by looking for the text COM...
                    {
                        DataRow NEW = PORTS.NewRow(); //Create a new row to put data into.
                        string NAME = CAPTION_STRING.Split('(', ')')[1]; //Extract the COM port string from within the parenthesis.
                        NEW["Name"] = NAME; //The port name. Ex: "COM11"
                        NEW["Description"] = QUERY_OBJECT["Description"].ToString(); //Descriptor string. Ex: "Arduino Uno"
                        NEW["ID"] = int.Parse(NAME.Substring(3)); //Extract the numerals from the COM## text. Ex: "11"
                        NEW["Caption"] = CAPTION_STRING; //Full descriptor string. Ex: "Arduino Uno (COM11)"
                        PORTS.Rows.Add(NEW);
                        EVENTS.LOG_MESSAGE(2, string.Format("{0} detected and added to port list.", CAPTION_STRING));
                    }
                }
            }
            catch (Exception EX)
            {
                EVENTS.LOG_MESSAGE(2, "EXCEPTION", EX.Message);
                EVENTS.LOG_MESSAGE(1, "EXIT_FAIL");
                return false;
            }
            EVENTS.LOG_MESSAGE(1, "EXIT_SUCCESS");
            return true;
        }

        /// <summary>
        /// Check if the serial port is connected. This method will also raise a DISCONNECTED event if the connection drops out.
        /// </summary>
        /// <returns>
        /// <para>True = Connected.</para>
        /// <para>False = Disconnected.</para>
        /// </returns>
        private void POLL_PORT(object SENDER, ElapsedEventArgs E)
        {
            CONNECTED_PORT_POLL_TIMER.Interval = POLL_TIMER_INTERVAL; //Update the timer interval in case it has changed.
            if (!SERIAL_PORT.IsOpen) //If the port is no longer open...
            {
                CONNECTED_PORT_POLL_TIMER.Stop(); //Stop the timer.
                DISCONNECTED?.Invoke(null, null); //Raise the event.
                CONNECTED = false;
            }
            else
                CONNECTED = true;
        }

        /// <summary>
        /// This method closes the serial port.
        /// </summary>
        /// <returns>
        /// <para>True = Success.</para>
        /// <para>False = Failure.</para>
        /// </returns>
        public bool CLOSE_SERIAL_PORT()
        {
            EVENTS.LOG_MESSAGE(1, "ENTER");
            try
            {
                SERIAL_PORT.Close();
                CONNECTED = false;
                CONNECTED_PORT_POLL_TIMER.Stop();
                EVENTS.LOG_MESSAGE(2, "Serial port closed.");
                EVENTS.LOG_MESSAGE(1, "EXIT_SUCCESS");
                return true;
            }
            catch (Exception EX)
            {
                EVENTS.LOG_MESSAGE(2, "EXCEPTION", EX.Message);
                EVENTS.LOG_MESSAGE(1, "EXIT_FAIL");
                return false;
            }
        }
    }

}
